
[ (end-start)/step ]
range(10, 2, -2); // [10, 8, 6, 4, 2]	=> 10 - 2 - 2 - 2 - 2	=> 4번
(2-10)/-2 = 4
>>> 10+((2-10)/-2)*-2 >>> 2

range(10, 2, -3); // [10, 7, 4]		=> 10 - 3 - 3		=> 2번
(2-10)/-3 = 2
>>> 10+((2-10)/-3)*-3 >>> 4 

range(10, 2, -4); // [10, 6, 2]		=> 10 - 4 - 4		=> 2번
(2-10)/-4 = 2
>>> 10+((2-10)/-4)*-4 >>> 2

range(10, 2, -5); // [10, 5]		=> 10 - 5		=> 1번
(2-10)/-5 = 1
>>> 10+((2-10)/-5)*-5 >>> 5

range(10, 2, -6); // [10, 4]		=> 10 - 6		=> 1번
(2-10)/-6 = 1
>>> 10+((2-10)/-6)*-6 >>> 4




[ (end-start)/step ]
range(2, 10, 2); // [2, 4, 6, 8, 10]	=> 2 + 2 + 2 + 2 + 2	=> 4번
(10-2)/2 = 4
>>> 2 + ((10-2)/2)*2 >>> 10

range(2, 10, 3); // [2, 5, 8]		=> 2 + 3 + 3		=> 2번
(10-2)/3 = 2
>>> 2 + ((10-2)/3)*3 >>> 8

range(2, 10, 4); // [2, 6, 10]		=> 2 + 4 + 4		=> 2번
(10-2)/4 = 2
>>> 2 + ((10-2)/4)*4 >>> 10

range(2, 10, 5); // [2, 7]		=> 2 + 5		=> 1번
(10-2)/5 = 1
>>> 2 + ((10-2)/5)*5 >>> 7

range(2, 10, 6); // [2, 8] 		=> 2 + 6		=> 1번
(10-2)/6 = 1
>>> 2 + ((10-2)/6)*6 >>> 8



===> start + ( (end - start) / step ) * step

